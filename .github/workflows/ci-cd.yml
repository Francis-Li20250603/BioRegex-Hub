name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/bioregex-hub
  VERSION: latest
  POSTGRES_PASSWORD: postgres

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/test_db
      SECRET_KEY: test-secret-key
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install backend dependencies
      working-directory: backend
      run: |
        pip install -r requirements.txt
        pip install "pydantic[email]" pytest pytest-cov

    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          pg_isready -U postgres -h localhost && break
          sleep 2
        done

    - name: Initialize test database
      run: |
        export PGPASSWORD=${{ env.POSTGRES_PASSWORD }}
        psql -U postgres -h localhost -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

    - name: Run database migrations
      working-directory: backend
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      run: python scripts/init_db.py

    - name: Run backend tests
      working-directory: backend
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        SECRET_KEY: ${{ env.SECRET_KEY }}
        ALGORITHM: ${{ env.ALGORITHM }}
        ACCESS_TOKEN_EXPIRE_MINUTES: ${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}
      run: pytest -v tests/ --cov=app --cov-report=xml

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: frontend
      run: npm run test

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: backend
        push: true
        tags: ${{ env.DOCKER_IMAGE }}-backend:${{ env.VERSION }}

    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: frontend
        push: true
        tags: ${{ env.DOCKER_IMAGE }}-frontend:${{ env.VERSION }}

  deploy-prod:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: SSH Deploy
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.PROD_SERVER_HOST }}
        username: ${{ secrets.PROD_SERVER_USER }}
        key: ${{ secrets.PROD_SERVER_SSH_KEY }}
        script: |
          cd /opt/bioregex-hub
          docker-compose pull
          docker-compose up -d --build
          docker system prune -f
