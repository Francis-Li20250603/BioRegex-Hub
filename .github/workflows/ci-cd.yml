name: 全云端 CI/CD 流程

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# 全局配置：关闭不必要的步骤，确保所有操作在云端完成
jobs:
  # 阶段1：构建并测试（完全在 GitHub 云端执行）
  build-and-test:
    runs-on: ubuntu-latest  # 使用 GitHub 提供的云端服务器
    services:
      # 云端临时启动 PostgreSQL 服务（无需本地数据库）
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres  # 直接硬编码，避免变量引用问题
          POSTGRES_DB: test_db
        ports:
          - 5432:5432  # 暴露端口供测试使用
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5  # 确保数据库启动成功后再执行后续步骤

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4  # 从 GitHub 仓库拉取代码到云端服务器

      - name: 安装 Python 环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # 匹配项目依赖的 Python 版本

      - name: 安装 Node.js 环境（前端需要）
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装后端依赖
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install "pydantic[email]" pytest pytest-cov  # 测试相关依赖

      - name: 安装 PostgreSQL 客户端（用于连接服务）
        run: sudo apt-get -yqq install postgresql-client

      - name: 等待 PostgreSQL 服务就绪
        run: |
          for i in {1..10}; do
            pg_isready -U postgres -h localhost && break  # 检查数据库是否可用
            sleep 2
          done

      - name: 初始化测试数据库
        run: |
          export PGPASSWORD=postgres  # 直接使用明文密码（仅云端测试用）
          psql -U postgres -h localhost -d test_db -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"

      - name: 执行数据库迁移（创建表和初始数据）
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db  # 硬编码连接地址
        run: python scripts/init_db.py

      - name: 运行后端测试（云端执行，不依赖本地）
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key  # 测试用密钥，无需本地配置
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
        run: pytest -v tests/ --cov=app  # 输出详细测试日志，方便排查问题

      - name: 安装前端依赖
        working-directory: frontend
        run: npm ci  # 安装前端依赖（比 npm install 更严格，确保版本一致）

      - name: 运行前端测试
        working-directory: frontend
        run: npm run test  # 执行前端测试脚本

  # 阶段2：构建并推送 Docker 镜像（推送到 GitHub 容器仓库，无需本地存储）
  build-and-push:
    needs: build-and-test  # 依赖测试通过后才执行
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # 只在 main 分支推送镜像
    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 登录 GitHub 容器仓库（GHCR）
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # 自动获取当前 GitHub 用户名
          password: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动生成的临时令牌，无需本地配置

      - name: 构建并推送后端镜像
        uses: docker/build-push-action@v5
        with:
          context: backend  # 后端代码目录
          push: true  # 推送镜像到 GHCR
          tags: ghcr.io/${{ github.repository_owner }}/bioregex-hub-backend:latest  # 镜像标签（固定格式）

      - name: 构建并推送前端镜像
        uses: docker/build-push-action@v5
        with:
          context: frontend  # 前端代码目录
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/bioregex-hub-frontend:latest

  # 阶段3：部署到生产环境（可选，若没有生产服务器可注释此阶段）
  deploy:
    needs: build-and-push  # 依赖镜像推送成功后才执行
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 云端部署到生产服务器
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}  # 服务器地址（提前在 GitHub Secrets 配置）
          username: ${{ secrets.PROD_SERVER_USER }}  # 登录用户名
          password: ${{ secrets.PROD_SERVER_PASSWORD }}  # 登录密码
          script: |
            # 服务器上拉取最新镜像并重启服务
            cd /opt/bioregex-hub
            docker compose pull
            docker compose up -d --build
            docker system prune -f  # 清理无用镜像，释放服务器空间
